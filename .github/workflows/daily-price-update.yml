name: Daily Price Update

# D√©clencheurs du workflow
on:
  # Ex√©cution programm√©e : tous les jours √† 8h UTC (10h Paris en hiver, 9h en √©t√©)
  schedule:
    - cron: '0 8 * * *'  # Format: minute heure jour mois jour_semaine
  
  # Permet aussi le d√©clenchement manuel depuis l'interface GitHub
  workflow_dispatch:

jobs:
  update-prices:
    runs-on: ubuntu-latest
    
    steps:
      # √âtape 1: Information sur l'ex√©cution
      - name: Print execution time
        run: |
          echo "üïê Updating prices at $(date)"
          echo "üåç Timezone: UTC"
          echo "üìç Paris time: $(TZ=Europe/Paris date)"
      
      # √âtape 2: Appel de la fonction Supabase Edge
      - name: Call Supabase Edge Function
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_USER_EMAIL: ${{ secrets.SUPABASE_USER_EMAIL }}
          SUPABASE_USER_PASSWORD: ${{ secrets.SUPABASE_USER_PASSWORD }}
        run: |
          echo "üîê Authenticating user..."
          
          # Authentification pour obtenir un access token
          AUTH_RESPONSE=$(curl -s -X POST \
            "${SUPABASE_URL}/auth/v1/token?grant_type=password" \
            -H "Content-Type: application/json" \
            -H "apikey: ${SUPABASE_ANON_KEY}" \
            -d "{\"email\":\"${SUPABASE_USER_EMAIL}\",\"password\":\"${SUPABASE_USER_PASSWORD}\"}")
          
          # Extraction du token d'acc√®s
          ACCESS_TOKEN=$(echo $AUTH_RESPONSE | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
          
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Authentication failed!"
            echo "Response: $AUTH_RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Authentication successful"
          echo "üîÑ Calling update-prices function..."
          
          # Appel de la fonction Edge pour mettre √† jour les prix
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            "${SUPABASE_URL}/functions/v1/update-prices" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extraction du code HTTP et du corps de la r√©ponse
          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS/d')
          
          echo "üìä Response status: $HTTP_STATUS"
          echo "üìã Response body: $BODY"
          
          # V√©rification du succ√®s
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Prices updated successfully!"
            
            # Extraction des statistiques (si disponibles)
            UPDATED=$(echo $BODY | grep -o '"updated":[0-9]*' | cut -d: -f2)
            FAILED=$(echo $BODY | grep -o '"failed":[0-9]*' | cut -d: -f2)
            
            if [ -n "$UPDATED" ]; then
              echo "‚úì Updated: $UPDATED asset(s)"
            fi
            
            if [ -n "$FAILED" ] && [ "$FAILED" -gt 0 ]; then
              echo "‚ö†Ô∏è Failed: $FAILED asset(s)"
            fi
          else
            echo "‚ùå Price update failed with status $HTTP_STATUS"
            exit 1
          fi
      
      # √âtape 3: Notification de succ√®s
      - name: Success notification
        if: success()
        run: |
          echo "üéâ Daily price update completed successfully!"
          echo "üìÖ Next update scheduled for tomorrow at 8:00 UTC"
      
      # √âtape 4: Notification d'√©chec
      - name: Failure notification
        if: failure()
        run: |
          echo "üí• Daily price update failed!"
          echo "üîç Check the logs above for details"
          echo "‚ö†Ô∏è You may need to update prices manually today"

